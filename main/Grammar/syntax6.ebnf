file := ws , [ include_directive , { ews , include_directive } , ws ] ;

include_directive := include_keyword , iws , include_path ;
include_keyword := ("i" | "I") , ("n" | "N") , ("c" | "C") , ("l" | "L") , ("u" | "U") , ("d" | "D") , ("e" | "E") ;
include_path := [ slash | backslash ] , part_of_path , { ( slash | backslash ) , part_of_path } , [ slash | backslash ] ;

other_directive := ( keyword - include_keyword ) , { other_directive_fragment | iws | glue } ;
keyword := keyword_symbol , { keyword_symbol } - ows ;
keyword_symbol := ( other_directive_fragment | backslash ) ;
other_directive_fragment  := nonspace - backslash | backslash , nonspace ;
glue := backslash , newline ;

part_of_path := { nonspace } - ows ;

ws := [ ews ] ; (* white space *)
ews := ews_element, { ews_element } ;
ews_element := ows_element | other_directive ;  (* extended whitespace *)
ows := ows_element , { ows_element } ;
ows_element := iws_element | newline ; (* overline white space *)
iws := iws_element , { iws_element } ; 
iws_element := space_or_tab | glue | comment ;  (* inside of line white space *)

space_or_tab := ( space | tab ) , { space | tab } ;
newline := cr | lf | cr , lf ;
nonspace := ac - ( space | tab | cr | lf ) ;

comment := comment_start, comment_body , comment_end ;
comment_start := { space_or_tab } , "#" ;
comment_body := { ac - ( lf | cr ) } ;
comment_end := (* empty rule *) ;

letter := ? Terminals.Letter ? ;
letter_or_digit := ? Terminals.LetterOrDigit ? ;
ac := ? Terminals.AnyChar ? ;

tab := "\x09" ;
lf := "\x0A" ;
cr := "\x0D" ;
space := "\x20" ;
asterisk := "\x2A" ;
dot := "\x2E" ;
slash := "\x2F" ;
backslash := "\x5C" ;

// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  sabayon
// DateTime: 4/27/2017 5:51:25 PM
// UserName: user
// Input file <Grammar1/my_parser.y - 4/27/2017 5:27:42 PM>

// options: lines report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Scanner;

namespace Parser
{
public enum Tokens {error=2,EOF=3,kwAND=4,kwOR=5,ID=6};

public struct ValueType
#line 12 "Grammar1/my_parser.y"
       { 
		public int iVal;
		public string sVal;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[7];
  private static State[] states = new State[10];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "Statements", "EXPR", };

  static Parser() {
    states[0] = new State(new int[]{6,7,3,-2},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{4,5,5,8});
    states[5] = new State(new int[]{6,7},new int[]{-4,6});
    states[6] = new State(-4);
    states[7] = new State(-6);
    states[8] = new State(new int[]{6,7},new int[]{-4,9});
    states[9] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4,4,-4});
    rules[5] = new Rule(-3, new int[]{-4,5,-4});
    rules[6] = new Rule(-4, new int[]{6});

    aliases = new Dictionary<int, string>();
    aliases.Add(4, "AND");
    aliases.Add(5, "OR");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 32 "Grammar1/my_parser.y"
// Don't forget to declare the Parser-Constructor
public Parser(Scanner.Scanner scnr) : base(scnr) { }
#line default
}
}

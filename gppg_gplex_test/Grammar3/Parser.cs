// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  sabayon
// DateTime: 5/7/2017 11:49:54 PM
// UserName: user
// Input file <Grammar3/my_parser.y - 5/7/2017 11:24:33 PM>

// options: lines report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Grammar3;

namespace Grammar3
{
public enum Tokens {error=2,EOF=3,SPACE=4,EOL=5,WORD=6,
    LSB=7,FORWARDSLASH=8,RSBI=9,RSB=10,LSS=11,LSE=12};

public struct ValueType
#line 16 "Grammar3/my_parser.y"
       { 
		public int iVal;
		public string sVal;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[22];
  private static State[] states = new State[31];
  private static string[] nonTerms = new string[] {
      "content", "eols", "$accept", "eol", "nonempty_content", "nonspace_content", 
      "parts", "section", "section_start", "section_end", "section_content", 
      "rsb", };

  static Parser() {
    states[0] = new State(new int[]{5,11,3,-5},new int[]{-1,1,-5,3,-2,4,-4,9});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-6);
    states[4] = new State(new int[]{6,12,7,13,3,-7},new int[]{-6,5,-7,6});
    states[5] = new State(-8);
    states[6] = new State(new int[]{5,11,3,-9},new int[]{-4,7});
    states[7] = new State(new int[]{5,11,3,-10},new int[]{-5,8,-2,4,-4,9});
    states[8] = new State(-11);
    states[9] = new State(new int[]{5,11,6,-2,7,-2,3,-2},new int[]{-2,10,-4,9});
    states[10] = new State(-3);
    states[11] = new State(-4);
    states[12] = new State(-12);
    states[13] = new State(new int[]{6,27},new int[]{-8,14,-9,15});
    states[14] = new State(-13);
    states[15] = new State(new int[]{8,19,6,12,7,13},new int[]{-10,16,-11,17,-7,24});
    states[16] = new State(-14);
    states[17] = new State(new int[]{8,19},new int[]{-10,18});
    states[18] = new State(-15);
    states[19] = new State(new int[]{6,20});
    states[20] = new State(new int[]{10,22,9,23},new int[]{-12,21});
    states[21] = new State(-17);
    states[22] = new State(-18);
    states[23] = new State(-19);
    states[24] = new State(new int[]{5,11},new int[]{-4,25});
    states[25] = new State(new int[]{7,26,6,12},new int[]{-11,30,-7,24});
    states[26] = new State(new int[]{6,27,8,-20},new int[]{-8,14,-9,15});
    states[27] = new State(new int[]{10,28});
    states[28] = new State(new int[]{5,11},new int[]{-4,29});
    states[29] = new State(-16);
    states[30] = new State(-21);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-3, new int[]{-1,3});
    rules[2] = new Rule(-2, new int[]{-4});
    rules[3] = new Rule(-2, new int[]{-4,-2});
    rules[4] = new Rule(-4, new int[]{5});
    rules[5] = new Rule(-1, new int[]{});
    rules[6] = new Rule(-1, new int[]{-5});
    rules[7] = new Rule(-5, new int[]{-2});
    rules[8] = new Rule(-5, new int[]{-2,-6});
    rules[9] = new Rule(-6, new int[]{-7});
    rules[10] = new Rule(-6, new int[]{-7,-4});
    rules[11] = new Rule(-6, new int[]{-7,-4,-5});
    rules[12] = new Rule(-7, new int[]{6});
    rules[13] = new Rule(-7, new int[]{7,-8});
    rules[14] = new Rule(-8, new int[]{-9,-10});
    rules[15] = new Rule(-8, new int[]{-9,-11,-10});
    rules[16] = new Rule(-9, new int[]{6,10,-4});
    rules[17] = new Rule(-10, new int[]{8,6,-12});
    rules[18] = new Rule(-12, new int[]{10});
    rules[19] = new Rule(-12, new int[]{9});
    rules[20] = new Rule(-11, new int[]{-7,-4,7});
    rules[21] = new Rule(-11, new int[]{-7,-4,-11});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // eol -> EOL
#line 31 "Grammar3/my_parser.y"
       { Console.Write("\\n"); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 80 "Grammar3/my_parser.y"
// Don't forget to declare the Parser-Constructor
public Parser(Grammar3.Scanner scnr) : base(scnr) { }
#line default
}
}
